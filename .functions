#!/usr/bin/env bash

# Create a new directory and enter it
function mkd() {
	mkdir -p "$@" && cd "$_";
}

# Change working directory to the top-most Finder window location
function cdf() { # short for `cdfinder`
	cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')";
}

# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
function targz() {
	local tmpFile="${@%/}.tar";
	tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1;

	size=$(
		stat -f"%z" "${tmpFile}" 2> /dev/null; # macOS `stat`
		stat -c"%s" "${tmpFile}" 2> /dev/null;  # GNU `stat`
	);

	local cmd="";
	if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
		# the .tar file is smaller than 50 MB and Zopfli is available; use it
		cmd="zopfli";
	else
		if hash pigz 2> /dev/null; then
			cmd="pigz";
		else
			cmd="gzip";
		fi;
	fi;

	echo "Compressing .tar ($((size / 1000)) kB) using \`${cmd}\`…";
	"${cmd}" -v "${tmpFile}" || return 1;
	[ -f "${tmpFile}" ] && rm "${tmpFile}";

	zippedSize=$(
		stat -f"%z" "${tmpFile}.gz" 2> /dev/null; # macOS `stat`
		stat -c"%s" "${tmpFile}.gz" 2> /dev/null; # GNU `stat`
	);

	echo "${tmpFile}.gz ($((zippedSize / 1000)) kB) created successfully.";
}

# Determine size of a file or total size of a directory
function fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh;
	else
		local arg=-sh;
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@";
	else
		du $arg .[^.]* ./*;
	fi;
}

# Use Git’s colored diff when available
hash git &>/dev/null;
if [ $? -eq 0 ]; then
	function diff() {
		git diff --no-index --color-words "$@";
	}
fi;

# Create a data URL from a file
function dataurl() {
	local mimeType=$(file -b --mime-type "$1");
	if [[ $mimeType == text/* ]]; then
		mimeType="${mimeType};charset=utf-8";
	fi
	echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')";
}

# Start an HTTP server from a directory, optionally specifying the port
function server() {
	local port="${1:-8000}";
	sleep 1 && open "http://localhost:${port}/" &
	# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
	# And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)
	python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port";
}

# Start a PHP server from a directory, optionally specifying the port
# (Requires PHP 5.4.0+.)
function phpserver() {
	local port="${1:-4000}";
	local ip=$(ipconfig getifaddr en1);
	sleep 1 && open "http://${ip}:${port}/" &
	php -S "${ip}:${port}";
}

# Compare original and gzipped file size
function gz() {
	local origsize=$(wc -c < "$1");
	local gzipsize=$(gzip -c "$1" | wc -c);
	local ratio=$(echo "$gzipsize * 100 / $origsize" | bc -l);
	printf "orig: %d bytes\n" "$origsize";
	printf "gzip: %d bytes (%2.2f%%)\n" "$gzipsize" "$ratio";
}

# Run `dig` and display the most useful info
function digga() {
	dig +nocmd "$1" any +multiline +noall +answer;
}

# Show all the names (CNs and SANs) listed in the SSL certificate
# for a given domain
function getcertnames() {
	if [ -z "${1}" ]; then
		echo "ERROR: No domain specified.";
		return 1;
	fi;

	local domain="${1}";
	echo "Testing ${domain}…";
	echo ""; # newline

	local tmp=$(echo -e "GET / HTTP/1.0\nEOT" \
		| openssl s_client -connect "${domain}:443" -servername "${domain}" 2>&1);

	if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
		local certText=$(echo "${tmp}" \
			| openssl x509 -text -certopt "no_aux, no_header, no_issuer, no_pubkey, \
			no_serial, no_sigdump, no_signame, no_validity, no_version");
		echo "Common Name:";
		echo ""; # newline
		echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//" | sed -e "s/\/emailAddress=.*//";
		echo ""; # newline
		echo "Subject Alternative Name(s):";
		echo ""; # newline
		echo "${certText}" | grep -A 1 "Subject Alternative Name:" \
			| sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2;
		return 0;
	else
		echo "ERROR: Certificate not found.";
		return 1;
	fi;
}

# Normalize `open` across Linux, macOS, and Windows.
# This is needed to make the `o` function (see below) cross-platform.
if [ ! $(uname -s) = 'Darwin' ]; then
	if grep -q Microsoft /proc/version; then
		# Ubuntu on Windows using the Linux subsystem
		alias open='explorer.exe';
	else
		alias open='xdg-open';
	fi
fi

# `o` with no arguments opens the current directory, otherwise opens the given
# location
function o() {
	if [ $# -eq 0 ]; then
		open .;
	else
		open "$@";
	fi;
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
	tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}

function cosh {
  docker_host_args='-e DOCKER_HOST'
  if [ -S /var/run/docker.sock ]; then
    docker_host_args="${docker_host_args} -v /var/run/docker.sock:/var/run/docker.sock"
  fi

  # TODO: handle $(pwd) == ${TMPDIR} || '/tmp' # for Darwin
  tmp_dir="${TMPDIR:-/tmp}"
  if [ "xDarwin" = "x$(uname)" ]; then
    tmp_dir='/tmp'
  fi
  tmp_args="-e TMPDIR=${tmp_dir} -v ${tmp_dir}:${tmp_dir}"
  mkdir -p $tmp_dir/cosh
  mkdir -p $tmp_dir/cosh/bin

  home_args="-e HOME -v ${HOME}:/container_user_home"
  if [ ! "x$(pwd)" = "x${HOME}" ]; then
    home_args="${home_args} -v ${HOME}:${HOME}"
  fi

  dev_args=''
  if [ ! "x$(pwd)" = "x/dev" ]; then
    dev_args='-v /dev:/dev'
  fi

  ssh_auth_sock_arg="-e SSH_AUTH_SOCK"
  if [ ! "x" = "x${SSH_AUTH_SOCK}" ]; then
    ssh_auth_sock_arg="${ssh_auth_sock_arg} -v ${SSH_AUTH_SOCK}:${SSH_AUTH_SOCK}"
  fi

  test -t 0 && export USE_TTY="-t"
  if [ ! -x "${tmp_dir}/cosh/docker/docker" ]; then
    # TODO: Do sha256sum verification
    eval "docker run --net=host -i ${USE_TTY} --rm $home_args $tmp_args $dev_args -v $(pwd):$(pwd):delegated -w $(pwd) actions/curl:latest -L -o $tmp_dir/cosh/docker.tgz https://download.docker.com/linux/static/stable/x86_64/docker-18.06.0-ce.tgz > /dev/null"
    eval "docker run --net=host -i ${USE_TTY} --rm $home_args $tmp_args $dev_args -v $(pwd):$(pwd):delegated -w $(pwd) actions/gzip:latest -d $tmp_dir/cosh/docker.tgz"
    eval "docker run --net=host -i ${USE_TTY} --rm $home_args $tmp_args $dev_args -v $(pwd):$(pwd):delegated -w $(pwd) actions/tar:latest fx $tmp_dir/cosh/docker.tar -C $tmp_dir/cosh"
    rm -f $tmp_dir/cosh/docker.tgz
    echo -e '#!/bin/bash'"\n/usr/local/bin/cosh --tmpdir ${tmp_dir}/cosh.docker-credential-gcloud docker-credential-gcloud \"\$@\"" > $tmp_dir/cosh/bin/docker-credential-gcloud
    chmod +x $tmp_dir/cosh/bin/docker-credential-gcloud
    echo -e '#!/bin/bash'"\n/usr/local/bin/cosh --tmpdir ${tmp_dir}/cosh.gcloud gcloud \"\$@\"" > $tmp_dir/cosh/bin/gcloud
    chmod +x $tmp_dir/cosh/bin/gcloud
  fi

  eval "docker run --net=host -i ${USE_TTY} --rm $docker_host_args $home_args $tmp_args $dev_args $ssh_auth_sock_arg -v $(pwd):$(pwd):delegated -v $tmp_dir/cosh/docker/docker:/sbin/docker:delegated -v $tmp_dir/cosh/bin/docker-credential-gcloud:/sbin/docker-credential-gcloud:delegated -v $tmp_dir/cosh/bin/gcloud:/sbin/gcloud:delegated -w $(pwd) actions/cosh:latest ${@}"
}

# Java
function jswitch {
  local version="${1}"

  if [[ $version -lt 9 ]]; then
    echo "Switching java to 1.${version}"
    export JAVA_HOME=`/usr/libexec/java_home -v 1.${version}`
  else
    echo "Switching java to ${version}"
    export JAVA_HOME=`/usr/libexec/java_home -v ${version}`
  fi
}
